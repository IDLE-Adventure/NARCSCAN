"""
MIT License
Copyright (c) 2024 IDLE-Adventure

A portscanner in Python with some taste added to it in regards to navigation and cmds.
Most of the print statements are for information gathering and can be blocked out with a simple # or removal.
Trying out a new way of creating code, experimental for me.

"""
#Modules
import socket
import os

#Lists, tuples
HOST = []
PORTS = []

def main():
    global prompt
    print("Use cmds for commands. Currently in the main unit.")

    while True:
        prompt = input("MAIN~> ").lower()
        if prompt == "cmds":
            print("dst <- Go to the Destination/target config", "results <- Show config results", "clear <- clears output from terminal", "scan <- Go to the portscan unit", sep="\n")

        elif prompt == "dst":
            dst()
            break

        elif prompt == "results":
            print("Dsts/Targets: ", HOST)
            print("Ports: ", PORTS)

        elif prompt == "scan":
            portscan()
            break

        elif prompt == "clear":
            os.system("cls")

        else:
            print("Command does not exist. Use cmds to find out what commands there are. Different units have different commands.")

        pass



def dst():
    print("Use cmds for commands", "Currently in the dst/target config unit")
    while True:
        prompt = input("DST~> ").lower()
        if prompt == "cmds":
            print("adst <- Add Destination/Target", "aports <- Add Ports", "rdst <- Remove Destination/Target", "rports <- Remove Ports", "results <- Show config results", "clear <- clears output from terminal", "main <- Return to the main unit", "scan <- Go to the portscan unit", sep="\n")

        elif prompt == "adst":
            target = input("Dst/Target: ")
            HOST.append(target)
            print(HOST)

        elif prompt == "aports":
            try:
                port = int(input("Integer/Port: "))

                try:
                    PORTS.append(port)
                    print(PORTS,"|", port, "<-Successfully added to PORTS list")
                except:
                    print(port, "<-Failed to remove port, or it doesn't exist in the first place.")

            except ValueError as Port_VE: #Integer was not used.
                print(Port_VE)
            

        elif prompt == "rdst":
            target = input("Dst/Target: ")
            try:
                HOST.remove(target)
                print(HOST,"|", target, "<-Successfully removed from HOST list")
            except:
                print(HOST,"|", target, "<-Does not exist in the first place or typo. Line 42")
            
        elif prompt == "rports":
            try:
                port = int(input("Integer/Port: "))
                PORTS.remove(port)
                print(PORTS,"|", port, "<-Successfully removed from PORTS list")

            except UnboundLocalError as Port_ULE: #Does not exist in the list.
                print(Port_ULE)

            except ValueError as Port_VE: #Integer was not used.
                print(Port_VE)

        elif prompt == "results":
            print("Dsts/Targets: ", HOST)
            print("Ports: ", PORTS)

        elif prompt == "clear":
            os.system("cls")

        elif prompt == "main":
            main()
            break

        elif prompt == "scan":
            portscan()
            break

        else:
            print("Command does not exist. Use cmds to find out what commands there are. Different units have different commands.")

        pass
                


def portscan():
    while True:
        prompt = input("SCAN~> ").lower()

        if prompt == "start": #Selective scan
            for Scan_hosts in HOST: #Iterates through HOST list
                for Scan_ports in PORTS: #Iterates through PORTS list
                    try:

                        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #IPv4, TCP/IP. Creates and re-creates the socket.
                        Setup_HOST = socket.gethostbyname(Scan_hosts)
                        sock.connect((Setup_HOST, Scan_ports)) #Connects socket.
                        ServiceCheck = socket.getservbyport(Scan_ports)
                        print("Host:", Setup_HOST, "Port:", Scan_ports, "Service:", ServiceCheck, "<OPEN")
                        sock.close() #Closes socket so that it can be re-used.

                    except:

                        print("Host:", Setup_HOST, "Port:", Scan_ports, "<CLOSED")
                        sock.close() #Closes socket so that it can be re-used.


        elif prompt == "qs": #Quickscan
            try:
                a = int(input("First Port: ")) #Use integer
                b = int(input("Last Port: ")) #Use integer
                for qsScan_Hosts in HOST:
                    for qsScan_Ports in range(a, b+1): #One-up b due to not scanning the last port without the one-up.
                            try:

                                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #IPv4, TCP/IP. Creates and re-creates the socket.
                                qsSetup_HOST = socket.gethostbyname(qsScan_Hosts)
                                sock.connect((qsSetup_HOST, qsScan_Ports)) #Connects socket.
                                qsServiceCheck = socket.getservbyport(qsScan_Ports) #Gets the service on the port
                                print("Host:", qsSetup_HOST, "Port:", qsScan_Ports, "Service:", qsServiceCheck, "<OPEN")
                                sock.close() #Closes socket so that it can be re-used.

                            except:

                                print("Host: ", qsScan_Hosts, "Port: ", qsScan_Ports, "<CLOSED")
                                sock.close() #Closes socket so that it can be re-used.

            except ValueError: #Integer was not used.
                print("Not an integer.")        

        elif prompt == "sc":          
            for scScan_Hosts in HOST:
                    for scScan_Ports in PORTS: #One-up b due to not scanning the last port without the one-up.                
                        try:

                            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #IPv4, TCP/IP. Creates and re-creates the socket.
                            scSetup_HOST = socket.gethostbyname(scScan_Hosts)
                            sock.connect((scSetup_HOST, scScan_Ports)) #Connects socket.
                            scServiceCheck = socket.getservbyport(scScan_Ports) #Gets the service on the port
                            sock.settimeout(5)
                            scServiceVersion = sock.recv(2048).decode("utf-8")
                            print("Host:", scSetup_HOST, "Port:", scScan_Ports, "Service:", scServiceCheck, "<OPEN")
                            print(scServiceVersion)
                            sock.close() #Closes socket so that it can be re-used.

                        except:

                            print("Host: ", scScan_Hosts, "Port: ", scScan_Ports, "<CLOSED or socket timer ran out so it doesn't hang")
                            sock.close() #Closes socket so that it can be re-used.
        
        elif prompt == "scqs":
            try:
                scqsa = int(input("First Port: ")) #Use integer
                scqsb = int(input("Last Port: ")) #Use integer 
                try:
                    timer = int(input("Set timer in seconds: "))
                    for scqsScan_Hosts in HOST:
                            for scqsScan_Ports in range(scqsa, scqsb+1): #One-up b due to not scanning the last port without the one-up.                
                                try:

                                    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #IPv4, TCP/IP. Creates and re-creates the socket.
                                    scqsSetup_HOST = socket.gethostbyname(scqsScan_Hosts)
                                    sock.connect((scqsSetup_HOST, scqsScan_Ports)) #Connects socket.
                                    scqsServiceCheck = socket.getservbyport(scqsScan_Ports) #Gets the service on the port
                                    sock.settimeout(timer)
                                    scqsServiceVersion = sock.recv(2048).decode("utf-8")
                                    print("Host:", scqsSetup_HOST, "Port:", scqsScan_Ports, "Service:", scqsServiceCheck, "<OPEN")
                                    print(scqsServiceVersion)
                                    sock.close() #Closes socket so that it can be re-used.

                                except:

                                    print("Host: ", scqsScan_Hosts, "Port: ", scqsScan_Ports, "<CLOSED or socket timer ran out so socket doesn't hang")
                                    sock.close() #Closes socket so that it can be re-used.
                except ValueError as timer_VE: #Integer was not used.
                    print(timer_VE, "Not an integer.")
            except ValueError: #Integer was not used.
                print("Not an integer.") 


        elif prompt == "cmds":
            print("start <- Start portscan", "qs <- Quickscan if you want to use range instead of manually input ports", "sc <- Service Version check, check the version of a service on X port", "scqs <- Same as sc and works like qs", "results <- Show config results", "clear <- clears output from terminal", "dst <- Go to Destination/target config", "main <- Return to the main unit", sep="\n")
        
        elif prompt == "dst":
            dst()
            sock.close()
            break

        elif prompt == "results":
            print("Dsts/Targets: ", HOST)
            print("Ports: ", PORTS)

        elif prompt == "clear":
            os.system("cls")

        elif prompt == "main":
            main()
            sock.close()
            break

        else:
            print("Command does not exist. Use cmds to find out what commands there are. Different units have different commands.")

        pass


#Initializors
main()
