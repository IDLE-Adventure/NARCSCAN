"""
Made by github.com/IDLE-Adventure
A portscanner in Python with some taste added to it in regards to navigation and cmds.
Most of the print statements are for information gathering and can be blocked out with a simple # or removal.

Trying out a new way of creating code, experimental for me.
"""
#Modules
import socket

#Lists, tuples
HOST = []
PORTS = []

def main():
    global prompt
    print("Use cmds for commands. Currently in the main unit.")

    while True:
        prompt = input("MAIN~=> ").lower()
        if prompt == "cmds":
            print("dst <- Go to the Destination/target config", "results <- Show config results", "scan <- Go to the portscan unit", sep="\n")

        elif prompt == "dst":
            dst()
            break

        elif prompt == "results":
            print("Dsts/Targets: ", HOST)
            print("Ports: ", PORTS)

        elif prompt == "scan":
            portscan()
            break

        else:
            print("Command does not exist. Use cmds to find out what commands there are. Different units have different commands.")

        pass



def dst():
    print("Use cmds for commands", "Currently in the dst/target config unit")
    while True:
        prompt = input("DST~=> ").lower()
        if prompt == "cmds":
            print("adst <- Add Destination/Target", "aports <- Add Ports", "rdsts <- Remove Destination/Target", "rports <- Remove Ports", "main <- Return to the main unit", "results <- Show config results", "scan <- Go to the portscan unit", sep="\n")

        elif prompt == "adst":
            target = input("Dst/Target: ")
            HOST.append(target)
            print(HOST)

        elif prompt == "aports":
            try:
                port = int(input("Integer/Port: "))
                PORTS.append(port)
                print(PORTS,"|", port, "<-Successfully added to PORTS list")
            except:
                print(port, "<-Not an integer. Line 37")
            

        elif prompt == "rdst":
            target = input("Dst/Target: ")
            try:
                HOST.remove(target)
                print(HOST,"|", target, "<-Successfully removed from HOST list")
            except:
                print(HOST,"|", target, "<-Does not exist in the first place or typo. Line 42")
            
        elif prompt == "rports":
            try:
                port = int(input("Integer/Port: "))
                PORTS.remove(port)
                print(PORTS,"|", port, "<-Successfully removed from PORTS list")
            except:
                print(port, "<-Not an integer. Line 56")

        elif prompt == "results":
            print("Dsts/Targets: ", HOST)
            print("Ports: ", PORTS)

        elif prompt == "main":
            main()
            break

        elif prompt == "scan":
            portscan()
            break

        else:
            print("Command does not exist. Use cmds to find out what commands there are. Different units have different commands.")

        pass


def portscan():
    while True:
        prompt = input("SCAN~=> ").lower()

        if prompt == "start":
            for Scan_hosts in HOST: #Iterates through HOST list
                for Scan_ports in PORTS: #Iterates through PORTS list
                    try:
                        print("Socket opened.")
                        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #IPv4, TCP/IP. Starts or restarts socket.
                        Setup_HOST = socket.gethostbyname(Scan_hosts)
                        sock.connect((Setup_HOST, Scan_ports)) #Connects socket.
                        print(Setup_HOST, Scan_ports, "<Open")
                        sock.close() #Closes socket so that it can be re-used.
                        print("Socket closed.")
                    except:
                        print(Setup_HOST, Scan_ports, "<Closed")
                        sock.close() #Closes socket so that it can be re-used.
                        print("Socket closed. Caused by exception.")

        elif prompt == "cmds":
            print("start <- Start portscan", "osocket <- Open socket before portscanning", "csocket <- Close socket when finished with portscan", "dst <- Go to Destination/target config", "main <- Return to the main unit", sep="\n")
        
        elif prompt == "dst":
            dst()
            sock.close()
            break

        elif prompt == "main":
            main()
            sock.close()
            break

        else:
            print("Command does not exist. Use cmds to find out what commands there are. Different units have different commands.")

        pass


#Initializors
main()
